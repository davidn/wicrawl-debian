dhcpd-options(5)                                              dhcpd-options(5)



NNAAMMEE
       dhcp-options - Dynamic Host Configuration Protocol options

DDEESSCCRRIIPPTTIIOONN
       The  Dynamic  Host  Configuration protocol allows the client to receive
       ooppttiioonnss from the DHCP server describing the network  configuration  and
       various  services that are available on the network.   When configuring
       ddhhccppdd((88)) or ddhhcclliieenntt((88)) ,, options must often be declared.   The  syntax
       for  declaring  options,  and the names and formats of the options that
       can be declared, are documented here.

RREEFFEERREENNCCEE:: OOPPTTIIOONN SSTTAATTEEMMEENNTTSS
       DHCP _o_p_t_i_o_n statements always start with the _o_p_t_i_o_n  keyword,  followed
       by  an option name, followed by option data.  The option names and data
       formats are described below.   It  is  not  necessary  to  exhaustively
       specify  all  DHCP  options  -  only  those options which are needed by
       clients must be specified.

       Option data comes in a variety of formats, as defined below:

       The iipp--aaddddrreessss data type can  be  entered  either  as  an  explicit  IP
       address  (e.g.,  239.254.197.10)  or  as  a  domain  name  (e.g.,  haa-
       gen.isc.org).  When entering a domain name, be sure  that  that  domain
       name resolves to a single IP address.

       The  iinntt3322  data  type  specifies a signed 32-bit integer.   The uuiinntt3322
       data type specifies an unsigned 32-bit integer.   The iinntt1166 and  uuiinntt1166
       data  types specify signed and unsigned 16-bit integers.   The iinntt88 and
       uuiinntt88 data types specify signed and unsigned 8-bit integers.   Unsigned
       8-bit integers are also sometimes referred to as octets.

       The  tteexxtt  data  type  specifies  an  NVT  ASCII  string, which must be
       enclosed in double quotes - for example, to specify a root-path option,
       the syntax would be

       option root-path "10.0.1.4:/var/tmp/rootfs";

       The  ddoommaaiinn--nnaammee  data  type  specifies  a  domain name, which must not
       enclosed in double quotes.   This data type is not used for any  exist-
       ing DHCP options.   The domain name is stored just as if it were a text
       option.

       The ffllaagg data type specifies a boolean value.   Booleans can be  either
       true or false (or on or off, if that makes more sense to you).

       The  ssttrriinngg  data type specifies either an NVT ASCII string enclosed in
       double quotes, or a series of octets specified  in  hexadecimal,  sepa-
       rated by colons.   For example:

         option dhcp-client-identifier "CLIENT-FOO";
       or
         option dhcp-client-identifier 43:4c:49:45:54:2d:46:4f:4f;

SSEETTTTIINNGG OOPPTTIIOONN VVAALLUUEESS UUSSIINNGG EEXXPPRREESSSSIIOONNSS
       Sometimes  it's  helpful  to  be able to set the value of a DHCP option
       based on some value that the client has sent.   To do this, you can use
       expression  evaluation.   The ddhhccpp--eevvaall((55)) manual page describes how to
       write expressions.   To assign  the  result  of  an  evaluation  to  an
       option, define the option as follows:

         ooppttiioonn _m_y_-_o_p_t_i_o_n == _e_x_p_r_e_s_s_i_o_n ;;

       For example:

         option hostname = binary-to-ascii (16, 8, "-",
                                            substring (hardware, 1, 6));

SSTTAANNDDAARRDD DDHHCCPP OOPPTTIIOONNSS
       The documentation for the various options mentioned below is taken from
       the latest IETF draft document on DHCP  options.   Options  not  listed
       below  may  not  yet  be  implemented,  but  it is possible to use such
       options by defining them in the configuration  file.   Please  see  the
       DEFINING  NEW  OPTIONS heading later in this document for more informa-
       tion.

       Some of the options documented here are automatically generated by  the
       DHCP  server  or by clients, and cannot be configured by the user.  The
       value of such an option can be used in the configuration  file  of  the
       receiving DHCP protocol agent (server or client), for example in condi-
       tional expressions. However, the value of the option cannot be used  in
       the  configuration  file  of  the  sending  agent, because the value is
       determined only _a_f_t_e_r the configuration file has been processed. In the
       following  documentation,  such options will be shown as "not user con-
       figurable"

       The standard options are:

       ooppttiioonn aallll--ssuubbnneettss--llooccaall _f_l_a_g;;

          This option specifies whether or not the client may assume that  all
          subnets  of  the IP network to which the client is connected use the
          same MTU as the subnet of  that  network  to  which  the  client  is
          directly  connected.   A  value  of  true indicates that all subnets
          share the same MTU.  A value of false means that the  client  should
          assume  that some subnets of the directly connected network may have
          smaller MTUs.

       ooppttiioonn aarrpp--ccaacchhee--ttiimmeeoouutt _u_i_n_t_3_2;;

          This option specifies the timeout in seconds for ARP cache  entries.

       ooppttiioonn bboooottffiillee--nnaammee _t_e_x_t;;

          This  option  is used to identify a bootstrap file.  If supported by
          the client, it should have the same effect as the ffiilleennaammee  declara-
          tion.  BOOTP clients are unlikely to support this option.  Some DHCP
          clients will support it, and others actually require it.

       ooppttiioonn bboooott--ssiizzee _u_i_n_t_1_6;;

          This option specifies the length in 512-octet blocks of the  default
          boot image for the client.

       ooppttiioonn bbrrooaaddccaasstt--aaddddrreessss _i_p_-_a_d_d_r_e_s_s;;

          This  option  specifies the broadcast address in use on the client's
          subnet.  Legal values for broadcast addresses are specified in  sec-
          tion 3.2.1.3 of STD 3 (RFC1122).

       ooppttiioonn ccooookkiiee--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s...  ];;

          The  cookie server option specifies a list of RFC 865 cookie servers
          available to the client.  Servers should be listed in order of pref-
          erence.

       ooppttiioonn ddeeffaauulltt--iipp--ttttll _u_i_n_t_8_;

          This  option  specifies  the  default  time-to-live  that the client
          should use on outgoing datagrams.

       ooppttiioonn ddeeffaauulltt--ttccpp--ttttll _u_i_n_t_8;;

          This option specifies the default TTL that  the  client  should  use
          when sending TCP segments.  The minimum value is 1.

       ooppttiioonn ddhhccpp--cclliieenntt--iiddeennttiiffiieerr _s_t_r_i_n_g;;

          This  option  can  be  used to specify a DHCP client identifier in a
          host declaration, so that dhcpd can find the host record by matching
          against the client identifier.

          Please  be aware that some DHCP clients, when configured with client
          identifiers that are ASCII text, will prepend a zero  to  the  ASCII
          text.   So you may need to write:

               option dhcp-client-identifier "\0foo";

          rather than:

               option dhcp-client-identifier "foo";

       ooppttiioonn ddhhccpp--lleeaassee--ttiimmee _u_i_n_t_3_2;;

          This  option  is  used  in a client request (DHCPDISCOVER or DHCPRE-
          QUEST) to allow the client to  request  a  lease  time  for  the  IP
          address.   In  a  server  reply (DHCPOFFER), a DHCP server uses this
          option to specify the lease time it is willing to offer.

          This option is not directly user configurable in the  server;  refer
          to  the  _m_a_x_-_l_e_a_s_e_-_t_i_m_e  and  _d_e_f_a_u_l_t_-_l_e_a_s_e_-_t_i_m_e  server  options in
          ddhhccppdd..ccoonnff((55))..

       ooppttiioonn ddhhccpp--mmaaxx--mmeessssaaggee--ssiizzee _u_i_n_t_1_6;;

          This option, when sent by the client, specifies the maximum size  of
          any  response  that the server sends to the client.   When specified
          on the server, if the client did not  send  a  dhcp-max-message-size
          option,  the  size specified on the server is used.   This works for
          BOOTP as well as DHCP responses.

       ooppttiioonn ddhhccpp--mmeessssaaggee _t_e_x_t;;

          This option is used by a DHCP server to provide an error message  to
          a  DHCP  client  in  a  DHCPNAK message in the event of a failure. A
          client may use this option in a DHCPDECLINE message to indicate  why
          the client declined the offered parameters.

          This option is not user configurable.

       ooppttiioonn ddhhccpp--mmeessssaaggee--ttyyppee _u_i_n_t_8;;

          This  option,  sent by both client and server, specifies the type of
          DHCP message contained in the DHCP packet.  Possible  values  (taken
          directly from RFC2132) are:

                       1     DHCPDISCOVER
                       2     DHCPOFFER
                       3     DHCPREQUEST
                       4     DHCPDECLINE
                       5     DHCPACK
                       6     DHCPNAK
                       7     DHCPRELEASE
                       8     DHCPINFORM

          This option is not user configurable.

       ooppttiioonn ddhhccpp--ooppttiioonn--oovveerrllooaadd _u_i_n_t_8;;

          This  option  is  used  to  indicate that the DHCP 'sname' or 'file'
          fields are being overloaded by using them to carry DHCP  options.  A
          DHCP  server  inserts  this  option  if the returned parameters will
          exceed the usual space allotted for options.

          If this option is present, the client interprets the specified addi-
          tional  fields  after  it  concludes  interpretation of the standard
          option fields.

          Legal values for this option are:

                       1     the 'file' field is used to hold options
                       2     the 'sname' field is used to hold options
                       3     both fields are used to hold options

          This option is not user configurable.


       ooppttiioonn ddhhccpp--ppaarraammeetteerr--rreeqquueesstt--lliisstt _u_i_n_t_1_6;;

          This option, when sent by the client, specifies  which  options  the
          client  wishes  the  server  to  return.   Normally, in the ISC DHCP
          client, this is done using the _r_e_q_u_e_s_t statement.   If  this  option
          is not specified by the client, the DHCP server will normally return
          every option that is valid in scope and that fits  into  the  reply.
          When  this option is specified on the server, the server returns the
          specified options.   This can be used to  force  a  client  to  take
          options  that it hasn't requested, and it can also be used to tailor
          the response of the DHCP server for clients that  may  need  a  more
          limited  set of options than those the server would normally return.

       ooppttiioonn ddhhccpp--rreebbiinnddiinngg--ttiimmee _u_i_n_t_3_2;;

          This option specifies the number of seconds from the time  a  client
          gets an address until the client transitions to the REBINDING state.

          This option is not user configurable.


       ooppttiioonn ddhhccpp--rreenneewwaall--ttiimmee _u_i_n_t_3_2;;

          This option specifies the number of seconds from the time  a  client
          gets  an address until the client transitions to the RENEWING state.

          This option is not user configurable.


       ooppttiioonn ddhhccpp--rreeqquueesstteedd--aaddddrreessss _i_p_-_a_d_d_r_e_s_s;;

          This option is used by the client in a DHCPDISCOVER to request  that
          a particular IP address be assigned.

          This option is not user configurable.


       ooppttiioonn ddhhccpp--sseerrvveerr--iiddeennttiiffiieerr _i_p_-_a_d_d_r_e_s_s;;

          This  option  is used in DHCPOFFER and DHCPREQUEST messages, and may
          optionally be included in the DHCPACK and  DHCPNAK  messages.   DHCP
          servers  include  this option in the DHCPOFFER in order to allow the
          client to distinguish between lease offers.  DHCP  clients  use  the
          contents of the 'server identifier' field as the destination address
          for any DHCP messages unicast to the DHCP server.  DHCP clients also
          indicate  which of several lease offers is being accepted by includ-
          ing this option in a DHCPREQUEST message.

          The value of this option is the IP address of the server.

          This option is not directly user configurable. See the  _s_e_r_v_e_r_-_i_d_e_n_-
          _t_i_f_i_e_r server option in _d_h_c_p_d_._c_o_n_f_(_5_)_.


       ooppttiioonn ddoommaaiinn--nnaammee _t_e_x_t;;

          This  option  specifies  the domain name that client should use when
          resolving hostnames via the Domain Name System.

       ooppttiioonn ddoommaaiinn--nnaammee--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s...  ];;

          The domain-name-servers option specifies a list of Domain Name  Sys-
          tem  (STD  13,  RFC  1035)  name  servers  available  to the client.
          Servers should be listed in order of preference.

       ooppttiioonn eexxtteennssiioonnss--ppaatthh _t_e_x_t;;

          This option specifies the  name  of  a  file  containing  additional
          options  to  be  interpreted  according to the DHCP option format as
          specified in RFC2132.

       ooppttiioonn ffiinnggeerr--sseerrvveerr _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s... ];;

          The Finger server option specifies a list of Finger  servers  avail-
          able  to  the  client.  Servers should be listed in order of prefer-
          ence.

       ooppttiioonn ffoonntt--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s...  ];;

          This option specifies a list of X Window System Font servers  avail-
          able to the client. Servers should be listed in order of preference.

       ooppttiioonn hhoosstt--nnaammee _s_t_r_i_n_g;;

          This option specifies the name of the client.  The name may  or  may
          not be qualified with the local domain name (it is preferable to use
          the domain-name option to specify the domain name).   See  RFC  1035
          for  character  set  restrictions.   This  option is only honored by
          ddhhcclliieenntt--ssccrriipptt((88)) if the hostname for the  client  machine  is  not
          set.

       ooppttiioonn iieeeeee880022--33--eennccaappssuullaattiioonn _f_l_a_g;;

          This  option specifies whether or not the client should use Ethernet
          Version 2 (RFC 894) or IEEE 802.3 (RFC 1042)  encapsulation  if  the
          interface  is  an  Ethernet.   A  value  of false indicates that the
          client should use RFC 894 encapsulation.  A value of true means that
          the client should use RFC 1042 encapsulation.

       ooppttiioonn iieenn111166--nnaammee--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s...  ];

          The  ien116-name-servers  option  specifies  a  list of IEN 116 name
          servers available to the client.  Servers should be listed in  order
          of preference.

       ooppttiioonn iimmpprreessss--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s...  ];;

          The impress-server option specifies a list of Imagen Impress servers
          available to the client.  Servers should be listed in order of pref-
          erence.

       ooppttiioonn iinntteerrffaaccee--mmttuu _u_i_n_t_1_6;;

          This  option specifies the MTU to use on this interface.   The mini-
          mum legal value for the MTU is 68.

       ooppttiioonn iipp--ffoorrwwaarrddiinngg _f_l_a_g;;

          This option specifies whether the client  should  configure  its  IP
          layer for packet forwarding.  A value of false means disable IP for-
          warding, and a value of true means enable IP forwarding.

       ooppttiioonn iirrcc--sseerrvveerr _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s... ];;

          The IRC server option specifies a list of IRC servers  available  to
          the client.  Servers should be listed in order of preference.

       ooppttiioonn lloogg--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s...  ];;

          The  log-server  option  specifies a list of MIT-LCS UDP log servers
          available to the client.  Servers should be listed in order of pref-
          erence.

       ooppttiioonn llpprr--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s  [,, _i_p_-_a_d_d_r_e_s_s...  ];;

          The  LPR  server  option  specifies  a list of RFC 1179 line printer
          servers available to the client.  Servers should be listed in  order
          of preference.

       ooppttiioonn mmaasskk--ssuupppplliieerr _f_l_a_g;;

          This  option  specifies  whether or not the client should respond to
          subnet mask requests using ICMP.  A value of  false  indicates  that
          the  client  should  not  respond.   A  value of true means that the
          client should respond.

       ooppttiioonn mmaaxx--ddggrraamm--rreeaasssseemmbbllyy _u_i_n_t_1_6;;

          This option specifies the maximum  size  datagram  that  the  client
          should be prepared to reassemble.  The minimum legal value is 576.

       ooppttiioonn mmeerriitt--dduummpp _t_e_x_t;;

          This  option specifies the path-name of a file to which the client's
          core image should be dumped in the event the  client  crashes.   The
          path  is  formatted  as  a character string consisting of characters
          from the NVT ASCII character set.

       ooppttiioonn mmoobbiillee--iipp--hhoommee--aaggeenntt _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s... ];;

          This option specifies a list of IP addresses  indicating  mobile  IP
          home  agents  available  to  the client.  Agents should be listed in
          order of preference, although normally there will be only  one  such
          agent.

       ooppttiioonn nnddss--ccoonntteexxtt _s_t_r_i_n_g;;

          The  nds-context  option  specifies  the name of the initial Netware
          Directory Service for an NDS client.

       ooppttiioonn nnddss--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s... ];;

          The nds-servers option specifies a  list  of  IP  addresses  of  NDS
          servers.

       ooppttiioonn nnddss--ttrreeee--nnaammee _s_t_r_i_n_g;;

          The nds-tree-name option specifies NDS tree name that the NDS client
          should use.

       ooppttiioonn nneettbbiiooss--dddd--sseerrvveerr _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s...  ];;

          The NetBIOS datagram distribution server (NBDD) option  specifies  a
          list of RFC 1001/1002 NBDD servers listed in order of preference.

       ooppttiioonn nneettbbiiooss--nnaammee--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s...];;

          The  NetBIOS  name  server  (NBNS)  option  specifies  a list of RFC
          1001/1002 NBNS name servers listed in order of preference.   NetBIOS
          Name  Service is currently more commonly referred to as WINS.   WINS
          servers can be specified using the netbios-name-servers option.

       ooppttiioonn nneettbbiiooss--nnooddee--ttyyppee _u_i_n_t_8;;

          The NetBIOS node type option  allows  NetBIOS  over  TCP/IP  clients
          which  are  configurable  to  be  configured  as  described  in  RFC
          1001/1002.  The value is specified as a single octet  which  identi-
          fies the client type.

          Possible node types are:


          _1    B-node: Broadcast - no WINS

          _2    P-node: Peer - WINS only

          _4    M-node: Mixed - broadcast, then WINS

          _8    H-node: Hybrid - WINS, then broadcast

       ooppttiioonn nneettbbiiooss--ssccooppee _s_t_r_i_n_g;;

          The  NetBIOS  scope  option  specifies the NetBIOS over TCP/IP scope
          parameter for the client as specified in RFC 1001/1002. See RFC1001,
          RFC1002, and RFC1035 for character-set restrictions.

       ooppttiioonn nniiss--ddoommaaiinn _t_e_x_t;;

          This  option  specifies  the  name  of the client's NIS (Sun Network
          Information Services) domain.  The domain is formatted as a  charac-
          ter  string  consisting  of  characters from the NVT ASCII character
          set.

       ooppttiioonn nniiss--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s...  ];;

          This option specifies a list of IP addresses indicating NIS  servers
          available to the client.  Servers should be listed in order of pref-
          erence.

       ooppttiioonn nniisspplluuss--ddoommaaiinn _t_e_x_t;;

          This option specifies the name of the  client's  NIS+  domain.   The
          domain  is  formatted as a character string consisting of characters
          from the NVT ASCII character set.

       ooppttiioonn nniisspplluuss--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s...  ];;

          This option specifies a list of IP addresses indicating NIS+ servers
          available to the client.  Servers should be listed in order of pref-
          erence.

       ooppttiioonn nnnnttpp--sseerrvveerr _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s... ];;

          The NNTP server option specifies a list of NNTP servesr available to
          the client.  Servers should be listed in order of preference.

       ooppttiioonn nnoonn--llooccaall--ssoouurrccee--rroouuttiinngg _f_l_a_g;;

          This  option  specifies  whether  the client should configure its IP
          layer to allow forwarding of datagrams with non-local source  routes
          (see  Section 3.3.5 of [4] for a discussion of this topic).  A value
          of false means disallow forwarding of such datagrams, and a value of
          true means allow forwarding.

       ooppttiioonn nnttpp--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s...  ];;

          This  option  specifies  a  list of IP addresses indicating NTP (RFC
          1035) servers available to the client.  Servers should be listed  in
          order of preference.

       ooppttiioonn nnwwiipp--ddoommaaiinn _s_t_r_i_n_g;;

          The  name  of  the NetWare/IP domain that a NetWare/IP client should
          use.

       ooppttiioonn nnwwiipp--ssuubbooppttiioonnss _s_t_r_i_n_g;;

          A sequence of suboptions for NetWare/IP clients -  see  RFC2242  for
          details.    Normally  this option is set by specifying specific Net-
          Ware/IP suboptions - see the NETWARE/IP SUBOPTIONS section for  more
          information.

       ooppttiioonn ppaatthh--mmttuu--aaggiinngg--ttiimmeeoouutt _u_i_n_t_3_2;;

          This  option  specifies  the  timeout (in seconds) to use when aging
          Path MTU values discovered by the mechanism defined in RFC 1191.

       ooppttiioonn ppaatthh--mmttuu--ppllaatteeaauu--ttaabbllee _u_i_n_t_1_6 [,, _u_i_n_t_1_6...  ];;

          This option specifies a table of MTU sizes to  use  when  performing
          Path  MTU  Discovery as defined in RFC 1191.  The table is formatted
          as a list of 16-bit unsigned  integers,  ordered  from  smallest  to
          largest.  The minimum MTU value cannot be smaller than 68.

       ooppttiioonn ppeerrffoorrmm--mmaasskk--ddiissccoovveerryy _f_l_a_g;;

          This  option specifies whether or not the client should perform sub-
          net mask discovery using ICMP.  A value of false indicates that  the
          client  should  not  perform  mask discovery.  A value of true means
          that the client should perform mask discovery.

       ooppttiioonn ppoolliiccyy--ffiilltteerr _i_p_-_a_d_d_r_e_s_s _i_p_-_a_d_d_r_e_s_s
                         [,, _i_p_-_a_d_d_r_e_s_s _i_p_-_a_d_d_r_e_s_s...];;

          This option specifies policy filters for non-local  source  routing.
          The  filters consist of a list of IP addresses and masks which spec-
          ify destination/mask pairs with  which  to  filter  incoming  source
          routes.

          Any source routed datagram whose next-hop address does not match one
          of the filters should be discarded by the client.

          See STD 3 (RFC1122) for further information.

       ooppttiioonn ppoopp--sseerrvveerr _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s... ];;

          The POP3 server option specifies a list of POP3 servers available to
          the client.  Servers should be listed in order of preference.

       ooppttiioonn rreessoouurrccee--llooccaattiioonn--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s
                                     [,, _i_p_-_a_d_d_r_e_s_s...];;

          This  option  specifies  a list of RFC 887 Resource Location servers
          available to the client.  Servers should be listed in order of pref-
          erence.

       ooppttiioonn rroooott--ppaatthh _t_e_x_t;;

          This  option specifies the path-name that contains the client's root
          disk.  The path is formatted as a  character  string  consisting  of
          characters from the NVT ASCII character set.

       ooppttiioonn rroouutteerr--ddiissccoovveerryy _f_l_a_g;;

          This  option  specifies  whether  or  not  the client should solicit
          routers using the Router Discovery mechanism defined in RFC 1256.  A
          value  of  false indicates that the client should not perform router
          discovery.  A value of true means that  the  client  should  perform
          router discovery.

       ooppttiioonn rroouutteerr--ssoolliicciittaattiioonn--aaddddrreessss _i_p_-_a_d_d_r_e_s_s;;

          This  option specifies the address to which the client should trans-
          mit router solicitation requests.

       ooppttiioonn rroouutteerrss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s...  ];;

          The routers option specifies a list of IP addresses for  routers  on
          the  client's  subnet.  Routers should be listed in order of prefer-
          ence.

       ooppttiioonn ssllpp--ddiirreeccttoorryy--aaggeenntt _b_o_o_l_e_a_n _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s... ];;

          This option specifies two things: the IP addresses of  one  or  more
          Service  Location  Protocol Directory Agents, and whether the use of
          these addresses is mandatory.   If  the  initial  boolean  value  is
          true, the SLP agent should just use the IP addresses given.   If the
          value is false, the SLP agent may additionally do active or  passive
          multicast discovery of SLP agents (see RFC2165 for details).

          Please  note  that  in this option and the slp-service-scope option,
          the term "SLP Agent" is being used to refer to  a  Service  Location
          Protocol  agent  running on a machine that is being configured using
          the DHCP protocol.

          Also, please be aware that some companies may refer to SLP  as  NDS.
          If you have an NDS directory agent whose address you need to config-
          ure, the slp-directory-agent option should work.

       ooppttiioonn ssllpp--sseerrvviiccee--ssccooppee _b_o_o_l_e_a_n _t_e_x_t;;

          The Service Location Protocol Service  Scope  Option  specifies  two
          things:  a  list  of  service scopes for SLP, and whether the use of
          this list is mandatory.  If the initial boolean value is  true,  the
          SLP  agent  should  only  use  the  list  of scopes provided in this
          option; otherwise, it may use its own static configuration in  pref-
          erence to the list provided in this option.

          The  text string should be a comma-separated list of scopes that the
          SLP agent should use.   It may be omitted, in  which  case  the  SLP
          Agent will use the aggregated list of scopes of all directory agents
          known to the SLP agent.

       ooppttiioonn ssmmttpp--sseerrvveerr _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s... ];;

          The SMTP server option specifies a list of SMTP servers available to
          the client.  Servers should be listed in order of preference.

       ooppttiioonn ssttaattiicc--rroouutteess _i_p_-_a_d_d_r_e_s_s _i_p_-_a_d_d_r_e_s_s
                         [,, _i_p_-_a_d_d_r_e_s_s _i_p_-_a_d_d_r_e_s_s...];;

          This option specifies a list of static routes that the client should
          install in its routing cache.  If multiple routes to the same desti-
          nation  are specified, they are listed in descending order of prior-
          ity.

          The routes consist of a list of IP address pairs.  The first address
          is the destination address, and the second address is the router for
          the destination.

          The default route (0.0.0.0) is an illegal destination for  a  static
          route.   To  specify  the  default  route,  use  the rroouutteerrss option.
          Also, please note that this option is not intended for classless  IP
          routing  -  it  does not include a subnet mask.   Since classless IP
          routing is now the  most  widely  deployed  routing  standard,  this
          option  is  virtually  useless, and is not implemented by any of the
          popular DHCP clients, for example the Microsoft DHCP client.

       ooppttiioonn ssttrreeeettttaallkk--ddiirreeccttoorryy--aassssiissttaannccee--sseerrvveerr _i_p_-_a_d_d_r_e_s_s
                                                  [,, _i_p_-_a_d_d_r_e_s_s...];;

          The StreetTalk Directory Assistance (STDA) server option specifies a
          list  of  STDA  servers  available to the client.  Servers should be
          listed in order of preference.

       ooppttiioonn ssttrreeeettttaallkk--sseerrvveerr _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s... ];;

          The StreetTalk server option specifies a list of StreetTalk  servers
          available to the client.  Servers should be listed in order of pref-
          erence.

       ooppttiioonn ssuubbnneett--mmaasskk _i_p_-_a_d_d_r_e_s_s;;

          The subnet mask option specifies the client's subnet mask as per RFC
          950.   If  no subnet mask option is provided anywhere in scope, as a
          last resort dhcpd will use the subnet mask from the subnet  declara-
          tion  for  the  network on which an address is being assigned.  How-
          ever, _a_n_y subnet-mask option declaration that is in  scope  for  the
          address  being  assigned  will override the subnet mask specified in
          the subnet declaration.

       ooppttiioonn ssuubbnneett--sseelleeccttiioonn _s_t_r_i_n_g;;

          Sent by the client if an address is required in a subnet other  than
          the  one  that  would  normally  be  selected (based on the relaying
          address of the connected subnet the request is obtained  from).  See
          RFC3011.  Note  that  the  option number used by this server is 118;
          this has not always been the defined number, and  some  clients  may
          use  a  different  value.  Use  of this option should be regarded as
          slightly experimental!

       This option is not user configurable in the server.


       ooppttiioonn sswwaapp--sseerrvveerr _i_p_-_a_d_d_r_e_s_s;;

          This specifies the IP address of the client's swap server.

       ooppttiioonn ttccpp--kkeeeeppaalliivvee--ggaarrbbaaggee _f_l_a_g;;

          This option specifies whether or not  the  client  should  send  TCP
          keepalive  messages  with an octet of garbage for compatibility with
          older implementations.  A value of false indicates  that  a  garbage
          octet  should  not be sent. A value of true indicates that a garbage
          octet should be sent.

       ooppttiioonn ttccpp--kkeeeeppaalliivvee--iinntteerrvvaall _u_i_n_t_3_2;;

          This option specifies the interval (in seconds) that the client  TCP
          should  wait before sending a keepalive message on a TCP connection.
          The time is specified as a 32-bit unsigned integer.  A value of zero
          indicates  that the client should not generate keepalive messages on
          connections unless specifically requested by an application.

       ooppttiioonn ttffttpp--sseerrvveerr--nnaammee _t_e_x_t;;

          This option is used to identify a TFTP server and, if  supported  by
          the  client, should have the same effect as the sseerrvveerr--nnaammee declara-
          tion.   BOOTP clients are unlikely to  support  this  option.   Some
          DHCP clients will support it, and others actually require it.

       ooppttiioonn ttiimmee--ooffffsseett _i_n_t_3_2;;

          The  time-offset  option specifies the offset of the client's subnet
          in seconds from Coordinated Universal Time (UTC).

       ooppttiioonn ttiimmee--sseerrvveerrss _i_p_-_a_d_d_r_e_s_s [, _i_p_-_a_d_d_r_e_s_s...  ];;

          The time-server option specifies a list  of  RFC  868  time  servers
          available to the client.  Servers should be listed in order of pref-
          erence.

       ooppttiioonn ttrraaiilleerr--eennccaappssuullaattiioonn _f_l_a_g;;

          This option specifies whether or not the client should negotiate the
          use of trailers (RFC 893 [14]) when using the ARP protocol.  A value
          of false indicates that the client should not attempt to use  trail-
          ers.   A  value  of true means that the client should attempt to use
          trailers.

       ooppttiioonn uuaapp--sseerrvveerrss _t_e_x_t;;

          This option specifies a list  of  URLs,  each  pointing  to  a  user
          authentication  service that is capable of processing authentication
          requests encapsulated in the  User  Authentication  Protocol  (UAP).
          UAP servers can accept either HTTP 1.1 or SSLv3 connections.  If the
          list includes a URL that does not contain a port component, the nor-
          mal default port is assumed (i.e., port 80 for http and port 443 for
          https).  If the list includes a URL that does  not  contain  a  path
          component, the path /uap is assumed.   If more than one URL is spec-
          ified in this list, the URLs are separated by spaces.

       ooppttiioonn uusseerr--ccllaassss _s_t_r_i_n_g;;

          This option is used by some DHCP clients as a way for users to spec-
          ify  identifying  information to the client.   This can be used in a
          similar way to the vendor-class-identifier option, but the value  of
          the  option  is specified by the user, not the vendor.   Most recent
          DHCP clients have a way in the user interface to specify  the  value
          for this identifier, usually as a text string.

       ooppttiioonn vveennddoorr--ccllaassss--iiddeennttiiffiieerr _s_t_r_i_n_g;;

          This option is used by some DHCP clients to identify the vendor type
          and possibly the configuration of a DHCP client.  The information is
          a  string of bytes whose contents are specific to the vendor and are
          not specified in a standard.   To see what vendor  class  identifier
          clients are sending, you can write the following in your DHCP server
          configuration file:

          set vendor-string = option vendor-class-identifier;

          This will result in all entries in the DHCP  server  lease  database
          file  for clients that sent vendor-class-identifier options having a
          set statement that looks something like this:

          set vendor-string = "SUNW.Ultra-5_10";

          The vendor-class-identifier option is  normally  used  by  the  DHCP
          server  to  determine  the  options that are returned in the vveennddoorr--
          eennccaappssuullaatteedd--ooppttiioonnss option.   Please see  the  VENDOR  ENCAPSULATED
          OPTIONS section later in this manual page for further information.

       ooppttiioonn vveennddoorr--eennccaappssuullaatteedd--ooppttiioonnss _s_t_r_i_n_g;;

          The  vveennddoorr--eennccaappssuullaatteedd--ooppttiioonnss  option can contain either a single
          vendor-specific value or one  or  more  vendor-specific  suboptions.
          This  option is not normally specified in the DHCP server configura-
          tion file - instead, a vendor class is defined for each vendor, ven-
          dor  class  suboptions  are defined, values for those suboptions are
          defined, and the DHCP server makes up a response on that basis.

          Some default behaviours for well-known  DHCP  client  vendors  (cur-
          rently, the Microsoft Windows 2000 DHCP client) are configured auto-
          matically, but otherwise this must be configured manually - see  the
          VENDOR  ENCAPSULATED  OPTIONS  section later in this manual page for
          details.

       ooppttiioonn wwwwww--sseerrvveerr _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s... ];;

          The WWW server option specifies a list of WWW servers  available  to
          the client.  Servers should be listed in order of preference.

       ooppttiioonn xx--ddiissppllaayy--mmaannaaggeerr _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s...  ];;

          This  option specifies a list of systems that are running the X Win-
          dow  System  Display  Manager  and  are  available  to  the  client.
          Addresses should be listed in order of preference.

RREELLAAYY AAGGEENNTT IINNFFOORRMMAATTIIOONN OOPPTTIIOONN
       An IETF draft, draft-ietf-dhc-agent-options-11.txt, defines a series of
       encapsulated options that a relay agent can add to a DHCP  packet  when
       relaying  it  to  the  DHCP  server.   The server can then make address
       allocation decisions (or whatever other decisions it  wants)  based  on
       these  options.    The server also returns these options in any replies
       it sends through the relay agent, so that the relay agent can  use  the
       information in these options for delivery or accounting purposes.

       The  current draft defines two options.   To reference these options in
       the dhcp server, specify the option space name, "agent", followed by  a
       period,  followed  by  the  option name.   It is not normally useful to
       define values for these options in the server, although it is permissi-
       ble.   These options are not supported in the client.

       ooppttiioonn aaggeenntt..cciirrccuuiitt--iidd _s_t_r_i_n_g;;

          The  circuit-id  suboption  encodes an agent-local identifier of the
          circuit from which a DHCP client-to-server packet was received.   It
          is intended for use by agents in relaying DHCP responses back to the
          proper circuit.   The format of this option is currently defined  to
          be vendor-dependent, and will probably remain that way, although the
          current draft allows for for the possibility  of  standardizing  the
          format in the future.

       ooppttiioonn aaggeenntt..rreemmoottee--iidd _s_t_r_i_n_g;;

          The  remote-id  suboption  encodes information about the remote host
          end of a circuit.   Examples of what it might contain include caller
          ID  information,  username  information,  remote  ATM address, cable
          modem ID, and similar things.   In principal,  the  meaning  is  not
          well-specified,  and  it should generally be assumed to be an opaque
          object that is administratively guaranteed to be unique to a partic-
          ular remote end of a circuit.

       ooppttiioonn aaggeenntt..DDOOCCSSIISS--ddeevviiccee--ccllaassss _u_i_n_t_3_2;;

          The  DOCSIS-device-class suboption is intended to convey information
          about the host endpoint, hardware, and  software,  that  either  the
          host  operating system or the DHCP server may not otherwise be aware
          of (but the relay is able to distinguish).  This is implemented as a
          32-bit field (4 octets), each bit representing a flag describing the
          host in one of these ways.  So far, only bit zero (being  the  least
          significant  bit) is defined in RFC3256.  If this bit is set to one,
          the host is considered a CPE Controlled  Cable  Modem  (CCCM).   All
          other bits are reserved.

TTHHEE CCLLIIEENNTT FFQQDDNN SSUUBBOOPPTTIIOONNSS
       The  Client FQDN option, currently defined in the Internet Draft draft-
       ietf-dhc-fqdn-option-00.txt is not a standard yet,  but  is  in  suffi-
       ciently wide use already that we have implemented it.   Due to the com-
       plexity of the option format, we have implemented  it  as  a  suboption
       space  rather than a single option.   In general this option should not
       be configured by the user - instead it should be used  as  part  of  an
       automatic DNS update system.

       ooppttiioonn ffqqddnn..nnoo--cclliieenntt--uuppddaattee _f_l_a_g;;

          When  the client sends this, if it is true, it means the client will
          not attempt to update its A record.   When sent by the server to the
          client, it means that the client _s_h_o_u_l_d _n_o_t update its own A record.

       ooppttiioonn ffqqddnn..sseerrvveerr--uuppddaattee _f_l_a_g;;

          When the client sends this to the server, it is requesting that  the
          server update its A record.   When sent by the server, it means that
          the server has updated (or  is  about  to  update)  the  client's  A
          record.

       ooppttiioonn ffqqddnn..eennccooddeedd _f_l_a_g;;

          If  true, this indicates that the domain name included in the option
          is encoded in DNS wire format, rather  than  as  plain  ASCII  text.
          The  client  normally  sets  this to false if it doesn't support DNS
          wire format in the FQDN option.   The server should always send back
          the same value that the client sent.   When this value is set on the
          configuration side, it controls the format in  which  the  _f_q_d_n_._f_q_d_n
          suboption is encoded.

       ooppttiioonn ffqqddnn..rrccooddee11 _f_l_a_g;;

       ooppttiioonn ffqqddnn..rrccooddee22 _f_l_a_g;;

          These  options  specify  the  result of the updates of the A and PTR
          records, respectively, and are only sent by the DHCP server  to  the
          DHCP  client.   The  values of these fields are those defined in the
          DNS protocol specification.

       ooppttiioonn ffqqddnn..ffqqddnn _t_e_x_t;;

          Specifies the domain name that the client wishes to use.   This  can
          be  a  fully-qualified domain name, or a single label.   If there is
          no trailing generally  update  that  name  in  some  locally-defined
          domain.

       ooppttiioonn ffqqddnn..hhoossttnnaammee _-_-_n_e_v_e_r _s_e_t_-_-;;

          This  option  should never be set, but it can be read back using the
          ooppttiioonn and ccoonnffiigg--ooppttiioonn operators in an expression, in  which  case
          it returns the first label in the ffqqddnn..ffqqddnn suboption - for example,
          if the value of ffqqddnn..ffqqddnn is "foo.example.com.", then  ffqqddnn..hhoossttnnaammee
          will be "foo".

       ooppttiioonn ffqqddnn..ddoommaaiinnnnaammee _-_-_n_e_v_e_r _s_e_t_-_-;;

          This  option  should never be set, but it can be read back using the
          ooppttiioonn and ccoonnffiigg--ooppttiioonn operators in an expression, in  which  case
          it  returns all labels after the first label in the ffqqddnn..ffqqddnn subop-
          tion - for example, if the value of ffqqddnn..ffqqddnn is "foo.example.com.",
          then ffqqddnn..hhoossttnnaammee will be "example.com.".   If this suboption value
          is not set, it means that an unqualified name was sent in  the  fqdn
          option, or that no fqdn option was sent at all.

       If  you wish to use any of these suboptions, we strongly recommend that
       you refer to the Client FQDN option draft (or standard, when it becomes
       a  standard) - the documentation here is sketchy and incomplete in com-
       parison, and is just intended  for  reference  by  people  who  already
       understand the Client FQDN option specification.

TTHHEE NNEETTWWAARREE//IIPP SSUUBBOOPPTTIIOONNSS
       RFC2242  defines  a  set  of encapsulated options for Novell NetWare/IP
       clients.  To use these options in the dhcp server, specify  the  option
       space  name, "nwip", followed by a period, followed by the option name.
       The following options can be specified:

       ooppttiioonn nnwwiipp..nnssqq--bbrrooaaddccaasstt _f_l_a_g;;

          If true, the client should use the NetWare Nearest Server  Query  to
          locate  a NetWare/IP server.   The behaviour of the Novell client if
          this suboption is false, or is not present, is not specified.

       ooppttiioonn nnwwiipp..pprreeffeerrrreedd--ddssss _i_p_-_a_d_d_r_e_s_s [,, _i_p_-_a_d_d_r_e_s_s... ];;

          This suboption specifies a list of up to five IP addresses, each  of
          which  should  be  the IP address of a NetWare Domain SAP/RIP server
          (DSS).

       ooppttiioonn nnwwiipp..nneeaarreesstt--nnwwiipp--sseerrvveerr _i_p_-_a_d_d_r_e_s_s
                                    [,, _i_p_-_a_d_d_r_e_s_s...];;

          This suboption specifies a list of up to five IP addresses, each  of
          which should be the IP address of a Nearest NetWare IP server.

       ooppttiioonn nnwwiipp..aauuttoorreettrriieess _u_i_n_t_8;;

          Specifies  the  number  of  times  that  a  NetWare/IP client should
          attempt to communicate with a given DSS server at startup.

       ooppttiioonn nnwwiipp..aauuttoorreettrryy--sseeccss _u_i_n_t_8;;

          Specifies the number of seconds that a Netware/IP client should wait
          between  retries  when attempting to establish communications with a
          DSS server at startup.

       ooppttiioonn nnwwiipp..nnwwiipp--11--11 _u_i_n_t_8;;

          If true, the NetWare/IP client should support NetWare/IP version 1.1
          compatibility.    This is only needed if the client will be contact-
          ing Netware/IP version 1.1 servers.

       ooppttiioonn nnwwiipp..pprriimmaarryy--ddssss _i_p_-_a_d_d_r_e_s_s;;

          Specifies the IP address  of  the  Primary  Domain  SAP/RIP  Service
          server  (DSS)  for this NetWare/IP domain.   The NetWare/IP adminis-
          tration utility uses this value as Primary DSS server when configur-
          ing a secondary DSS server.

DDEEFFIINNIINNGG NNEEWW OOPPTTIIOONNSS
       The  Internet  Systems  Consortium  DHCP  client and server provide the
       capability to define new options.   Each DHCP  option  has  a  name,  a
       code,  and  a  structure.    The  name  is  used by you to refer to the
       option.   The code is a number, used by the DHCP server and  client  to
       refer  to  an option.   The structure describes what the contents of an
       option looks like.

       To define a new option, you need to choose a name for it that is not in
       use  for  some  other  option  - for example, you can't use "host-name"
       because the DHCP protocol already defines a host-name option, which  is
       documented  earlier  in  this  manual page.   If an option name doesn't
       appear in this manual page, you can use it, but it's  probably  a  good
       idea  to  put some kind of unique string at the beginning so you can be
       sure that future options don't take your name.   For example, you might
       define  an  option,  "local-host-name", feeling some confidence that no
       official DHCP option name will ever start with "local".

       Once you have chosen a name, you must choose a  code.   For  site-local
       options,  all  codes between 128 and 254 are reserved for DHCP options,
       so you can pick any one of  these.   In  practice,  some  vendors  have
       interpreted  the protocol rather loosely and have used option code val-
       ues greater than 128 themselves.   There's no real way  to  avoid  this
       problem, but it's not likely to cause too much trouble in practice.

       The  structure  of  an  option is simply the format in which the option
       data appears.   The ISC DHCP server currently  supports  a  few  simple
       types,  like  integers, booleans, strings and IP addresses, and it also
       supports the ability to define arrays of  single  types  or  arrays  of
       fixed sequences of types.

       New options are declared as follows:

       ooppttiioonn _n_e_w_-_n_a_m_e ccooddee _n_e_w_-_c_o_d_e == _d_e_f_i_n_i_t_i_o_n ;;

       The  values of _n_e_w_-_n_a_m_e and _n_e_w_-_c_o_d_e should be the name you have chosen
       for the new option and the  code  you  have  chosen.    The  _d_e_f_i_n_i_t_i_o_n
       should be the definition of the structure of the option.

       The following simple option type definitions are supported:

       BBOOOOLLEEAANN

       ooppttiioonn _n_e_w_-_n_a_m_e ccooddee _n_e_w_-_c_o_d_e == bboooolleeaann ;;

       An  option  of  type boolean is a flag with a value of either on or off
       (or true or false).   So an example use of the boolean type would be:

       option use-zephyr code 180 = boolean;
       option use-zephyr on;

       IINNTTEEGGEERR

       ooppttiioonn _n_e_w_-_n_a_m_e ccooddee _n_e_w_-_c_o_d_e == _s_i_g_n iinntteeggeerr _w_i_d_t_h ;;

       The _s_i_g_n token should either be blank, _u_n_s_i_g_n_e_d or _s_i_g_n_e_d.   The  width
       can  be  either  8,  16  or 32, and refers to the number of bits in the
       integer.   So for example, the following two lines show a definition of
       the sql-connection-max option and its use:

       option sql-connection-max code 192 = unsigned integer 16;
       option sql-connection-max 1536;

       IIPP--AADDDDRREESSSS

       ooppttiioonn _n_e_w_-_n_a_m_e ccooddee _n_e_w_-_c_o_d_e == iipp--aaddddrreessss ;;

       An option whose structure is an IP address can be expressed either as a
       domain name or as a dotted quad.  So the following is an example use of
       the ip-address type:

       option sql-server-address code 193 = ip-address;
       option sql-server-address sql.example.com;


       TTEEXXTT

       ooppttiioonn _n_e_w_-_n_a_m_e ccooddee _n_e_w_-_c_o_d_e == tteexxtt ;;

       An  option  whose  type is text will encode an ASCII text string.   For
       example:

       option sql-default-connection-name code 194 = text;
       option sql-default-connection-name "PRODZA";


       DDAATTAA SSTTRRIINNGG

       ooppttiioonn _n_e_w_-_n_a_m_e ccooddee _n_e_w_-_c_o_d_e == ssttrriinngg ;;

       An option whose type is a data string is essentially just a  collection
       of  bytes,  and  can  be specified either as quoted text, like the text
       type, or as a list of hexadecimal contents separated  by  colons  whose
       values must be between 0 and FF.   For example:

       option sql-identification-token code 195 = string;
       option sql-identification-token 17:23:19:a6:42:ea:99:7c:22;


       EENNCCAAPPSSUULLAATTIIOONN

       ooppttiioonn _n_e_w_-_n_a_m_e ccooddee _n_e_w_-_c_o_d_e == eennccaappssuullaattee _i_d_e_n_t_i_f_i_e_r ;;

       An  option  whose  type is eennccaappssuullaattee will encapsulate the contents of
       the option space specified in _i_d_e_n_t_i_f_i_e_r.    Examples  of  encapsulated
       options in the DHCP protocol as it currently exists include the vendor-
       encapsulated-options option,  the  netware-suboptions  option  and  the
       relay-agent-information option.

       option space local;
       option local.demo code 1 = text;
       option local-encapsulation code 197 = encapsulate local;
       option local.demo "demo";


       AARRRRAAYYSS

       Options  can  contain  arrays  of any of the above types except for the
       text and data string types, which aren't currently supported in arrays.
       An example of an array definition is as follows:

       option kerberos-servers code 200 = array of ip-address;
       option kerberos-servers 10.20.10.1, 10.20.11.1;

       RREECCOORRDDSS

       Options  can  also  contain data structures consisting of a sequence of
       data types, which is sometimes called a record type.   For example:

       option contrived-001 code 201 = { boolean, integer 32, text };
       option contrived-001 on 1772 "contrivance";

       It's also possible to have options that  are  arrays  of  records,  for
       example:

       option new-static-routes code 201 = array of {
            ip-address, ip-address, ip-address, integer 8 };
       option static-routes
            10.0.0.0 255.255.255.0 net-0-rtr.example.com 1,
            10.0.1.0 255.255.255.0 net-1-rtr.example.com 1,
            10.2.0.0 255.255.224.0 net-2-0-rtr.example.com 3;


VVEENNDDOORR EENNCCAAPPSSUULLAATTEEDD OOPPTTIIOONNSS
       The  DHCP  protocol  defines  the   vveennddoorr--eennccaappssuullaatteedd--ooppttiioonnss option,
       which allows vendors to define their own  options  that  will  be  sent
       encapsulated  in  a  standard  DHCP option.   The format of the vveennddoorr--
       eennccaappssuullaatteedd--ooppttiioonnss option is either a series of bytes whose format is
       not  specified,  or  a sequence of options, each of which consists of a
       single-byte vendor-specific option  code,  followed  by  a  single-byte
       length,  followed  by  as  many  bytes  of data as are specified in the
       length (the length does not include itself or the option code).

       The value of this option can be set in one of two ways.   The first way
       is to simply specify the data directly, using a text string or a colon-
       separated list of hexadecimal values.   For example:

       option vendor-encapsulated-options
           2:4:AC:11:41:1:
           3:12:73:75:6e:64:68:63:70:2d:73:65:72:76:65:72:31:37:2d:31:
           4:12:2f:65:78:70:6f:72:74:2f:72:6f:6f:74:2f:69:38:36:70:63;

       The second way of setting the value of this option is to have the  DHCP
       server generate a vendor-specific option buffer.   To do this, you must
       do four things: define an option space, define  some  options  in  that
       option  space,  provide  values  for them, and specify that that option
       space  should  be  used  to  generate  the  vveennddoorr--eennccaappssuullaatteedd--ooppttiioonnss
       option.

       To define a new option space in which vendor options can be stored, use
       the option space statement:

       ooppttiioonn ssppaaccee _n_a_m_e ;;

       The name can then be used in option definitions, as  described  earlier
       in this document.   For example:

       option space SUNW;
       option SUNW.server-address code 2 = ip-address;
       option SUNW.server-name code 3 = text;
       option SUNW.root-path code 4 = text;

       Once  you  have defined an option space and the format of some options,
       you can set up scopes that define values for those options, and you can
       say  when  to  use  them.   For example, suppose you want to handle two
       different classes of clients.   Using the option space definition shown
       in  the  previous example, you can send different option values to dif-
       ferent clients based on the  vendor-class-identifier  option  that  the
       clients send, as follows:

       class "vendor-classes" {
         match option vendor-class-identifier;
       }

       option SUNW.server-address 172.17.65.1;
       option SUNW.server-name "sundhcp-server17-1";

       subclass "vendor-classes" "SUNW.Ultra-5_10" {
         vendor-option-space SUNW;
         option SUNW.root-path "/export/root/sparc";
       }

       subclass "vendor-classes" "SUNW.i86pc" {
         vendor-option-space SUNW;
         option SUNW.root-path "/export/root/i86pc";
       }

       As  you  can see in the preceding example, regular scoping rules apply,
       so you can define values that are global in the global scope, and  only
       define  values  that  are  specific  to a particular class in the local
       scope.   The vveennddoorr--ooppttiioonn--ssppaaccee declaration tells the DHCP  server  to
       use  options  in the SUNW option space to construct the vveennddoorr--eennccaappssuu--
       llaatteedd--ooppttiioonnss option.

SSEEEE AALLSSOO
       dhcpd.conf(5),   dhcpd.leases(5),    dhclient.conf(5),    dhcp-eval(5),
       dhcpd(8),    dhclient(8),   RFC2132,   RFC2131,   draft-ietf-dhc-agent-
       options-??.txt.

AAUUTTHHOORR
       The Internet Systems Consortium DHCP Distribution was  written  by  Ted
       Lemon  under  a contract with Vixie Labs.  Funding for this project was
       provided through Internet Systems Consortium.  Information about Inter-
       net Systems Consortium can be found at hhttttpp::////wwwwww..iisscc..oorrgg..



                                                              dhcpd-options(5)
