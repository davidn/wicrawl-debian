package UI::GTKAdvanced;

use Data::Dumper;

my $advanced; # pointer to hold all content generated by this module

my ($aps_list, $plugins_list);

my $buffer;	# buffer for plugin output
my @PLUGINS;	# array to hold aps and their plugin output

my $plugin_collection;	# pointer to array to hold a set of plugins for an ap

my $ap_index;	  # selected ap used to restore selection after refresh
my $plugin_index; # selected plugin used to restore selection after refresh

sub generate {
	$advanced = Gtk2::HBox->new();

	#########################################
	# APs frame
	my $aps_frame = Gtk2::Frame->new();
	   
	# APs Scrolled Window
	my $aps_sw = Gtk2::ScrolledWindow->new(undef,undef);
	$aps_sw->set_policy('automatic','automatic');

	$aps_list = Gtk2::SimpleList->new (
		"Access Points" => 'markup',
	);

	# Enable searching
	$aps_list->set_search_column(0);
		
  	# Connect signal to selection
	$aps_list->get_selection->signal_connect (changed => sub {
		my @index = $aps_list->get_selected_indices;
		&show_plugins($index[0]);
	});

	$aps_sw->add($aps_list);
	$aps_frame->add($aps_sw);
		
	$advanced->pack_start($aps_frame,FALSE,FALSE,0);

	#########################################
	# Plugins frame
	my $plugins_frame = Gtk2::Frame->new();
	   
	# APs Scrolled Window
	my $plugins_sw = Gtk2::ScrolledWindow->new(undef,undef);
	$plugins_sw->set_policy('automatic','automatic');

	$plugins_list = Gtk2::SimpleList->new (
		"Plugins" => 'text',
	);

	# Enable searching
	$plugins_list->set_search_column(0);
		
  	# Connect signal to selection
	$plugins_list->get_selection->signal_connect (changed => sub {
		my @index = $plugins_list->get_selected_indices;
		&show_output($index[0]);
		
	});

	$plugins_sw->add($plugins_list);
	$plugins_frame->add($plugins_sw);
		
	$advanced->pack_start($plugins_frame,FALSE,FALSE,0);

	#########################################
	# Output frame
	my $output_frame = Gtk2::Frame->new("Plugin Output");

	# Output Scrolled Window
	my $sw = Gtk2::ScrolledWindow->new (undef, undef);
	$sw->set_shadow_type ('etched-out');
	$sw->set_policy ('automatic', 'automatic');
	$sw->set_size_request (430,300);
	$sw->set_border_width(5);

	# Creates view window and sets properties
	my $tview = Gtk2::TextView->new();
	$tview->set_editable(0);
	$tview->set_cursor_visible(0);
	$tview->set_wrap_mode("word");

	# Set initial view window content
	$buffer = $tview->get_buffer();

	$sw->add($tview);
	$output_frame->add($sw);

	$advanced->pack_start($output_frame,FALSE,FALSE,0);

	return $advanced;
}

sub show_data {
	# loading plugins and output
	@PLUGINS = UI::Common->get_plugin;

	# clear ap list
	@{$aps_list->{data}} = undef;
	pop @{$aps_list->{data}};		

	# clear plugin list
	@{$plugins_list->{data}} = undef;
	pop @{$plugins_list->{data}};

	# clear plugin output
	$buffer->set_text("");	

	foreach (@PLUGINS) {
		push @{$aps_list->{data}}, @$_[0];
		
	}

	# restore previously selected aps and plugins
	if(defined $ap_index) { $aps_list->select($ap_index); }
	if(defined $plugin_index) { $plugins_list->select($plugin_index); }
}

sub show_plugins {
	($index) = @_;
	if(@PLUGINS && defined $index) {
		$ap_index = $index;
		$plugin_collection = $PLUGINS[$ap_index];
	
		# clear plugin list
		@{$plugins_list->{data}} = undef;
		pop @{$plugins_list->{data}};

		# clear plugin output
		$buffer->set_text("");

		# remove header AP name temporarily for cleaner loop
		my $temp_name = shift @$plugin_collection;
		
		foreach (@$plugin_collection) {
			push @{$plugins_list->{data}}, $$_[0];		
		}

		# restore AP name in the head of the array
		unshift @$plugin_collection, $temp_name;		
	}

}

sub show_output {
	($index) = @_;
	if(defined $plugin_collection && defined $index) {
		$plugin_index = $index;
		# use plugin_index + 1 because the first entry in the array
		# is APs name
		my $plugin_data = $$plugin_collection[$plugin_index + 1];

		$buffer->set_text($$plugin_data[2]);
	}
}

sub show {
	$advanced->show_all;
}

sub hide {
	$advanced->hide_all;

	# Perform window resizing
	my $window = $advanced->get_parent->get_parent->get_parent->get_parent;
	my ($width, $height) = $window->get_size;
	$window->resize($width, $height - 300);
}

1;
