package UI::Reports;

use strict;

use Text::TabularDisplay;

#######################################################################
#function xml_report - Saves xml report to specified file
#	Arguments: 
#	Returns: none
###################
sub xml_report {
	shift;
	my ($filename) = @_;

	open(SAV, ">$filename") || UI::GTKOutput->lprint(2,0,"Couldn't save $filename");

	my $apcoredb = UI::Common->apcoredb;

	# save apcore
	open(DAT, $apcoredb) or UI::GTKOutput->lprint(2,0, "Couldn't open $apcoredb");
	my @raw_ap=<DAT>;
	close(DAT);

	# now print to file
	print SAV @raw_ap;
	close SAV;

	# rename and save plugincore
	$filename =~ s/\.xml/-plugin\.xml/;

	open(SAV, ">$filename") || UI::GTKOutput->lprint(2,0,"Couldn't save $filename");

	my $plugincoredb = UI::Common->plugincoredb;

	open(DAT, $plugincoredb) or UI::GTKOutput->lprint(2,0, "Couldn't open $apcoredb");
	my @raw_plugin=<DAT>;
	close(DAT);

	# now print to file
	print SAV @raw_plugin;
	close SAV;



}

#######################################################################
#function txt_report - Saves ascii report to specified file
#	Arguments: 
#	Returns: none
###################
sub txt_report {
	shift;
	my ($filename) = @_;

	open(SAV, ">$filename") || UI::GTKOutput->lprint(2,0,"Couldn't save $filename");

	my @APS = UI::Common->get_ap;
	my $wepcount = 0;
	my $packets = 0;
	my $totalap = 0;
	my $haveinternet = 0;
	my $newap = 0;
	my $ip = 0;
	my $associated = 0;
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
	$year += 1900;
	my $timestamp = "$mon-$mday-$year $hour:$min:$sec";

	my $output .= "Wicrawl Report - $timestamp\n";
	$output .= "================================================\n\n";

	my $tb = Text::TabularDisplay->new(
	"SSID", 
	"BSSID",
	"Plugin", 
	"Event", 
	"Timestamp", 
	"Encryption", 
	"Channel",
	"Power", 
	"Packets",  
#	"Time", 
	"Latitude", 
	"Longitude"
	);					

	foreach (@APS) {						
		$totalap++;
		$packets += $_->{PACKETS};
		if($_->{ENCRYPTION} eq "WEP") {$wepcount++}
		if($_->{EVENT} eq "have-internet") {$haveinternet++}
		if($_->{EVENT} eq "new-ap") {$newap++}
		if($_->{EVENT} eq "associated") {$associated++}
		if($_->{EVENT} eq "have-ip") {$ip++}
	
		$tb->add($_->{SSID},
			$_->{BSSID},
			$_->{PLUGIN},
			$_->{EVENT},
			$timestamp,
			$_->{ENCRYPTION},
			$_->{CHANNEL},
			$_->{POWER},
			$_->{PACKETS},	
			#$_->{TIME},
			$_->{LATITUDE},
			$_->{LONGITUDE});
	}

	my $statistics .= "    Total APs: $totalap\n";
	$statistics .= "    Encrypted: $wepcount\n";
	$statistics .= "        Ratio: ".100*$wepcount/$totalap."%\n";
	$statistics .= "      Packets: $packets\n";
	$statistics .= "   Associated: $associated\n";
	$statistics .= "      Have IP: $ip\n";
	$statistics .= "Have Internet: $haveinternet\n";
	$statistics .= "\n";
	
	$output .= "Statistics\n";
	$output .= "================================================================================\n";
	$output .= $statistics;

	$output .= "Summary\n";
	$output .= "================================================================================\n";
	$output .= $tb->render;

	$output .= "\n\nPlugins Output\n";
	$output .= "================================================================================\n";

	$output .= UI::Reports->plugin_txt_output;

	# add notice
	$output .= "\n\n";
	$output .= "================================================================================\n";
	$output .= "This report was generated by Wicrawl. Visit www.midnightresearch.com for updates";
				
	# now print to file
	print SAV $output;
	close SAV;
}

#######################################################################
#function plugin_txt_output - Generates ascii plugin output
#	Arguments: $plugincoredb - path for plugins xml file
#	Returns: ascii plugin output
###################
sub plugin_txt_output {
	shift;
	my (@PLUGINS) = UI::Common->get_plugin;

	my $tb = Text::TabularDisplay->new(
	"Plugin Name", 
	"Output",
	);	

	foreach my $plugin_collection (@PLUGINS) {		
		my $name = shift @$plugin_collection;

		my $plugins_output;
		foreach my $plugin_data (@$plugin_collection) {
			$plugins_output .= $$plugin_data[0]."\n\n";
			$plugins_output .= $$plugin_data[2]."\n";
			$plugins_output =~ s/\t/   /g;
		}		

		$tb->add($name, $plugins_output);
	}

	return $tb->render;
}

#######################################################################
#function html_report - Saves html report to specified file
#	Arguments: 
#	Returns: none
###################
sub html_report {
	shift;
	my ($filename) = @_;

	open(SAV, ">$filename") || UI::GTKOutput->lprint(2,0,"Couldn't save $filename");

	# timestamp when report was generated
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
	$year += 1900;
	my $timestamp = "$mon-$mday-$year $hour:$min:$sec";

	my $output = "<html>\n";
	$output .= "<head>\n";
	$output .= "<title>Wicrawl Report - $timestamp</title>\n";
	$output .= "</head>\n";
	$output .= "<body>\n";
	$output .= "<h1 align=center>Wicrawl Report</h1>\n<h3 align=center>$timestamp</h3>\n";

	##################################### SUMMARY #########################################	
	my @APS = UI::Common->get_ap;

	# statistics variables
	my $wepcount = 0;
	my $packets = 0;
	my $totalap = 0;
	my $haveinternet = 0;
	my $newap = 0;
	my $ip = 0;
	my $associated = 0;

	my $summary .= "<table border='1'>\n<tr bgcolor>";
	$summary .= "<td>SSID</td>";
	$summary .= "<td>BSSID</td>";
	$summary .= "<td>Plugin</td>";
	$summary .= "<td>Event</td>";
	$summary .= "<td>Timestamp</td>";
	$summary .= "<td>Encryption</td>";
	$summary .= "<td>Channel</td>";
	$summary .= "<td>Power</td>";
	$summary .= "<td>Packets</td>";
	#$summary .= "<td>Time</td>";
	$summary .= "<td>Latitude</td>";
	$summary .= "<td>Longitude</td>";
	$summary .= "</tr>";

	foreach (@APS) {
		$summary .= "	<tr>\n";
				
		$totalap++;
		$packets += $_->{PACKETS};
		if($_->{ENCRYPTION} eq "WEP") {$wepcount++}
		if($_->{EVENT} eq "have-internet") {$haveinternet++}
		if($_->{EVENT} eq "new-ap") {$newap++}
		if($_->{EVENT} eq "associated") {$associated++}
		if($_->{EVENT} eq "have-ip") {$ip++}

		#fix timestamp
		($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($_->{TIMESTAMP});
		$year += 1900;
		$timestamp = "$mon-$mday-$year $hour:$min:$sec";

		#get correct color for the row
		my $color = "black";
		my $event = $_->{EVENT};
		if ($event eq "new-ap") {
			$color = "red";
		}
		elsif ($event eq "associated") {
			$color = "orange";
		}
		elsif ($event eq "have-internet") {
			$color = "darkgreen";
		}
		else {
			$color = "black";
		}

		$summary .= "		<td><font color='$color'>$_->{SSID}</font></td>\n";
		$summary .= "		<td><font color='$color'>$_->{BSSID}</font></td>\n";
		$summary .= "		<td><font color='$color'>$_->{PLUGIN}</font></td>\n";
		$summary .=  "		<td><font color='$color'>$_->{EVENT}</font></td>\n";
		$summary .= "		<td><font color='$color'>$timestamp</font></td>\n";
		$summary .=  "		<td><font color='$color'>$_->{ENCRYPTION}</font></td>\n";
		$summary .= "		<td><font color='$color'>$_->{CHANNEL}</font></td>\n";
		$summary .= "		<td><font color='$color'>$_->{POWER}</font></td>\n";
		$summary .= "		<td><font color='$color'>$_->{PACKETS}</font></td>\n";
		#$summary .= "		<td><font color='$color'>$_->{POWER}</font></td>\n";
		$summary .= "		<td><font color='$color'>$_->{LATITUDE}</font></td>\n";
		$summary .= "		<td><font color='$color'>$_->{LONGITUDE}</font></td>\n";
		$summary .= "</tr>\n\n";
	}

	$summary .= "</table>\n\n";

	my $statistics .= "<table>\n";	
	$statistics .= "<tr><td align='right'>Total APs:</td><td>$totalap</td></tr>\n";
	$statistics .= "<tr><td align='right'>Encrypted:</td><td>$wepcount</td></tr>\n";
	$statistics .= "<tr><td align='right'>Ratio:</td><td>".100*$wepcount/$totalap."%</td></tr>\n";
	$statistics .= "<tr><td align='right'>Packets:</td><td>$packets</td></tr>\n";
	$statistics .= "<tr><td align='right'>Associated:</td><td>$associated</td></tr>\n";
	$statistics .= "<tr><td align='right'>Have IP:</td><td>$wepcount</td></tr>\n";
	$statistics .= "<tr><td align='right'>Have Internet:</td><td>$haveinternet</td></tr>\n";
	$statistics .= "</table>";
	$statistics .= "<br>\n";

	$output .= "<h2>Statistics</h2><hr>\n";
	$output .= $statistics;

	$output .= "<h2>Summary</h2><hr>\n";
	$output .= $summary;

	# formatted plugins output
	$output .= "<h2>Plugins Output</h2><hr>\n";
	$output .= UI::Reports->plugin_html_output;

	# add notice
	$output .= "<hr>\n";
	$output .= "<p>This report was generated by Wicrawl. Visit <a href='http://www.midnightresearch.com'>www.midnightresearch.com</a> for updates.</p>";

	$output .= "</body>\n";
	$output .= "</html>\n";

	# now print to file
	print SAV $output;
	close SAV;
}


#######################################################################
#function plugin_html_output - Generates html plugin output
#	Arguments: $plugincoredb - path for plugins xml file
#	Returns: html plugin output
###################
sub plugin_html_output {
	shift;
	my (@PLUGINS) = UI::Common->get_plugin;

	my $output = "<table border=1>";

	foreach my $plugin_collection (@PLUGINS) {
		$output .= "<tr>\n";
		
		my $name = shift @$plugin_collection;
		$name =~ s/\n/\<br\>/;
		$output .= "<td valign=top>$name</td>";

		$output .= "<td>";
		foreach my $plugin_data (@$plugin_collection) {
			$output .= "<b>".$$plugin_data[0]."</b><br>";
			$output .= "<pre>".$$plugin_data[2]."</pre><br>";
		}
		$output .= "</td>";

		$output .= "</tr>";
	}

	$output .= "</table>";


	return $output;
}

1;
