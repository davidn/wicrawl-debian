package UI::CExecute;

use POSIX ":sys_wait_h";
use Fcntl;  

# Set basedir here so we can set the lib path dynamically.
BEGIN { 
	$basedir="@datadir@";
}
my $wicrawl = "$basedir/plugins/plugin-engine";

# used to open a pipe to a command to the plugin engine
my $fh;
my $pid;

#######################################################################
#function start
#	Arguments: None
#		Returns: None
####################
sub start {
	shift;
	my ($cui) = @_;
	my $args_pt = UI::Common->generate_command;
	my @args = @$args_pt;
	
	if(@args) {
		UI::COutput->lprint(0,1,"Wicrawl execution command line: @args\n");


		# Get output from wicrawl
		my $fh;
		$pid=open($fh, "-|", "@args") or UI::COutput->lprint(0,2,"\nCouldn't open pipe to the plugin-engine\n");

		# Change flags to O_NONBLOCK
		$flags = '';
		fcntl($fh, F_GETFL, $flags) or UI::COutput->lprint(0,2,"Couldn't get flags for $fh: $!\n");
		$flags |= O_NONBLOCK;
		fcntl($fh, F_SETFL, $flags) or UI::COutput->lprint(0,2,"Couldn't set flags for $fh: $!\n");

		# set the process group id so we can kill all children
		setpgrp($pid, $pid);

		$cui->set_timer('output',sub {
			my $output;
			read($fh, $output, 500); 
			if($output) { UI::COutput->lprint(0,1,$output);	}
		},1);

		# periodically refresh discovered APs
		$cui->set_timer('aps',sub {
			UI::CBasic->show_data;
			UI::CAdvanced->show_data;
		},3);
	}
}

sub stop {
	shift;
	my ($cui) = @_;
	
	$cui->schedule_event(sub {
		UI::COutput->lprint(0,3, "Stopping wicrawl...\n");

		if($pid) {
			kill(2, $pid);
			my $kid=waitpid($pid, WNOHANG);
			if($kid <= 0) {
				waitpid($pid, 0);
			}
		
			UI::COutput->lprint(0,3, "Child [$pid] dead\n");
			UI::COutput->lprint(1,1, "Discovery and plugin-engine finished\n");

			close($fh);
		}

		$cui->delete_timer('output');	# Kill plugin-engine and close filehandle
		$cui->delete_timer('aps');	# Stop periodic updates of aps and plugins
	});
}


1;
